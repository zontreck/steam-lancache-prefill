namespace SteamPrefill.Settings
{
    //TODO move to root folder
    public static class AppConfig
    {
        static AppConfig()
        {
            // Create required folders
            Directory.CreateDirectory(ConfigDir);
            Directory.CreateDirectory(CacheDir);
        }

        /// <summary>
        /// TODO document that this is actually the "trigger" domain.  Explain what it is used for, and why it is needed.
        /// </summary>
        public static string SteamTriggerDomain => "lancache.steamcontent.com";

        //TODO comment
        private static bool _verboseLogs;
        public static bool VerboseLogs
        {
            get => _verboseLogs;
            set
            {
                _verboseLogs = value;
                AnsiConsoleExtensions.WriteVerboseLogs = value;
            }
        }

        //TODO comment
        private static bool _enableSteamKitDebugLogs;
        public static bool EnableSteamKitDebugLogs
        {
            get => _enableSteamKitDebugLogs;
            set
            {
                _enableSteamKitDebugLogs = value;

                // Enable verbose logs as well
                VerboseLogs = true;
                AnsiConsoleExtensions.WriteVerboseLogs = value;
            }
        }

        //TODO comment
        public static bool SkipDownloads { get; set; }

        //TODO comment
        public static TimeSpan SteamKitRequestTimeout => TimeSpan.FromSeconds(60);

        /// <summary>
        /// Downloaded manifests, as well as other metadata, are saved into this directory to speedup future prefill runs.
        /// All data in here should be able to be deleted safely.
        /// </summary>
        public static readonly string CacheDir = CacheDirUtils.GetCacheDirBaseDirectories("SteamPrefill", CacheDirVersion);

        /// <summary>
        /// Increment when there is a breaking change made to the files in the cache directory
        /// </summary>
        private const string CacheDirVersion = "v1";

        /// <summary>
        /// Contains user configuration.  Should not be deleted, doing so will reset the app back to defaults.
        /// </summary>
        private static readonly string ConfigDir = Path.Combine(AppContext.BaseDirectory, "Config");

        #region Serialization file paths

        public static readonly string AccountSettingsStorePath = Path.Combine(ConfigDir, "account.config");

        /// <summary>
        /// Generated by the 'benchmark setup' command, is portable and can be moved with the app.
        /// </summary>
        public static readonly string BenchmarkWorkloadPath = Path.Combine(ConfigDir, "benchmarkWorkload.bin");
        public static readonly string UserSelectedAppsPath = Path.Combine(ConfigDir, "selectedAppsToPrefill.json");

        /// <summary>
        /// Keeps track of which depots have been previously downloaded.  Is used to determine whether or not a game is up to date,
        /// based on whether all of the depots being downloaded are up to date.
        /// </summary>
        public static readonly string SuccessfullyDownloadedDepotsPath = Path.Combine(ConfigDir, "successfullyDownloadedDepots.json");

        //TODO comment
        public static readonly string CachedCellIdPath = Path.Combine(CacheDir, "cellId.txt");

        #endregion
    }
}